im ordner stashfiles ist eine umsetzung die du nun integrierst. weitere infos: 

### ‚úÖ Backend (Cloudflare Workers + D1)

1. **Datenbank-Schema** (`0002_create_stash_tables.sql`):
   - `stash_items`: Cannabis-Best√§nde mit Start-/Aktuell-Menge
   - `stash_withdrawals`: Entnahme-Historie mit Timestamps
   - Optimierte Indizes f√ºr Performance

2. **Repository-Layer** (`stashRepository.ts`):
   - Typsichere D1-Abfragen
   - Aggregationen f√ºr Statistiken
   - History-Joins f√ºr erweiterte Item-Daten

3. **Service-Layer** (`stashService.ts`):
   - Validierungslogik
   - Business-Rules (z.B. Mengenpr√ºfung)
   - Statistik-Aggregationen

4. **API-Routes** (`/api/stash`):
   - `GET /` - Liste aller Items
   - `POST /` - Neues Item anlegen
   - `PUT /:id/withdraw` - Entnahme erfassen
   - `DELETE /:id` - Item l√∂schen
   - `GET /stats` - Aggregierte Statistiken
   - `GET /:id/withdrawals` - Item-Historie

5. **WebSocket-Integration**: Durable Object broadcastet `stashUpdated`-Events

### ‚úÖ Frontend (React + Radix UI)

1. **API-Layer** (`api-stash.ts`): Typsichere fetch-Wrapper

2. **React Hook** (`useStash.ts`): 
   - TanStack Query f√ºr Caching
   - Mutations f√ºr CRUD-Operationen
   - Auto-Refresh via WebSocket

3. **Komponenten**:
   - **StashPage**: Tabelle mit allen Items, Entnahme-/L√∂sch-Buttons
   - **AddStashItemDialog**: Formular f√ºr neue Items
   - **WithdrawDialog**: Entnahme-Dialog mit Quick-Buttons
   - **StashStatsPage**: Visualisierung mit Recharts (Pie, Line, Bar)

4. **UI-Features**:
   - Fortschrittsbalken (gr√ºn/gelb/rot)
   - Quick-Select f√ºr h√§ufige Mengen
   - Live-Updates via WebSocket
   - Responsive Design

### üîß Integration

**Backend**: Route in `index.ts` registrieren, DO um `stashUpdated` erweitern

**Frontend**: Routes in `app.tsx` hinzuf√ºgen, Header-Navigation erweitern

**Types**: Stash-Types in `libs/types/src/index.ts` exportieren

### üöÄ Migration ausf√ºhren

```bash
# Lokal
wrangler d1 execute heizbox --local --file=migrations/0002_create_stash_tables.sql

# Production
wrangler d1 execute heizbox --remote --file=migrations/0002_create_stash_tables.sql
```

Das System folgt exakt der bestehenden Architektur (Repository ‚Üí Service ‚Üí Routes, React Hooks, WebSocket-Broadcasts) und ist vollst√§ndig typsicher!